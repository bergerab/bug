(setq *op-number* 0)
(setq *ops* (dynamic-array 10))

(struct op
  ((name object)
   (code object)
   (nargs object)))

(function init-op (name code nargs)
  (let ((op (make op)))
    (setf op name (to-string name))
    (setf op code code)
    (setf op nargs nargs)
    op))

(function format-op (op)
  (string-concat
    "<op name=" (string-quote (getf op name))
            " code=" (getf op code)
            ">"))

(function op (name)
  (let ((op (init-op name *op-number* 0)))
    (dynamic-array-push *ops* op)
    (incq *op-number*)
    op))

(function get-op (code)
  (unless (out-of-bounds *ops* code)
    (dynamic-array-get *ops* code)))

(struct disassembler
  ((index object)))

"
(disassemble-source '(1 2 3))

[ nil nil 
  TOP_LEVEL calling DISASSEMBLE_SOURCE: (+ 1 2) <disassembler 0000000000EF8BB0> 4 <function [(+ 1 2) disassemble-source] [0x0F 0x10 0x2F 0x01]> 
  DISASSEMBLE_SOURCE calling DISASSEMBLE: <disassembler 0000000000EF8BB0> [0x0F] <op 00000000027A4780> 22 <function disassemble-source> 
  DISASSEMBLE calling DISASSEMBLE: <disassembler 0000000000EF8BB0> [0x0F] nil 66 <function disassemble> 
  (2nd) DISASSEMBLE calling DBA_GET(code, 1): [0x0F] 1 19 <function disassemble>
  ]
  index out of bounds

[nil nil 
  top-level -> '(+ 1 2) da
  disassemble-source -> da dba 
  disassemble -> da code 
"

(function init-disassembler ()
  (let ((da (make disassembler)))
    (setf da index 0)
    da))

(function disassemble (da code str)
  (if (< (getf da index) (dynamic-byte-array-length code))
    (let ((op (get-op (dynamic-byte-array-get code (getf da index)))))
      (if op
        (progn 
          (incf da index)
          (print (cons (getf op name) (disassemble da code str)))
          (string-join (cons (getf op name) (disassemble da code str)) "\n"))
        (print "ERROR: unsupported op" (getf da index))))
    (list str)))

(function disassemble-source (source)
  (let ((da (init-disassembler)))
    (disassemble da (impl:function-code (impl:compile source nil nil nil)) "")))

(op 'drop)
(op 'dup)
(op 'intern)
(op 'cons)
(op 'car)
(op 'cdr)
(op 'add)
(op 'addi)
(op 'sub)
(op 'subi)
(op 'mul)
(op 'div)
(op 'list)
(op 'load_nil)
(op 'const)
(op 'const_0)
(op 'const_1)
(op 'const_2)
(op 'const_3)
(op 'push_arg)
(op 'push_args)
(op 'print)
(op 'print_nl)
(op 'eq)
(op 'and)
(op 'or)
(op 'not)
(op 'gt)
(op 'gte)
(op 'bin_and)
(op 'bin_or)
(op 'lt)
(op 'lti)
(op 'lte)
(op 'set_symbol_value)
(op 'set_symbol_function)
(op 'symbol_value)
(op 'symbol_function)
(op 'jump)
(op 'jump_when_nil)
(op 'load_from_stack)
(op 'load_from_stack_0)
(op 'load_from_stack_1)
(op 'store_to_stack)
(op 'store_to_stack_0)
(op 'store_to_stack_1)
(op 'call_function)
(op 'call_symbol_function)
(op 'return_function)