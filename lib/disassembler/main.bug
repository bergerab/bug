(setq *op-number* 0)
(setq *ops* (dynamic-array 10))

(struct op
  ((name object)
   (id object)))

(function init-op (name id)
  (let ((op (make op)))
    (setf op name (to-string name))
    (setf op id id)
    op))

(function format-op (op)
  (string-concat
    "<op name=" (string-quote (getf op name))
            " id=" (getf op id)
            ">"))

(function op (name)
  (let ((op (init-op name *op-number*)))
    (dynamic-array-push *ops* op)
    (setq *op-number* (+ 1 *op-number*))
    op))

(op 'drop)
(op 'dup)
(op 'intern)
(op 'cons)
(op 'car)
(op 'cdr)
(op 'add)
(op 'addi)
(op 'sub)
(op 'subi)
(op 'mul)
(op 'div)
(op 'list)
(op 'load_nil)
(op 'const)
(op 'const_0)
(op 'const_1)
(op 'const_2)
(op 'const_3)
(op 'push_arg)
(op 'push_args)
(op 'print)
(op 'print_nl)
(op 'eq)
(op 'and)
(op 'or)
(op 'not)
(op 'gt)
(op 'gte)
(op 'bin_and)
(op 'bin_or)
(op 'lt)
(op 'lti)
(op 'lte)
(op 'set_symbol_value)
(op 'set_symbol_function)
(op 'symbol_value)
(op 'symbol_function)
(op 'jump)
(op 'jump_when_nil)
(op 'load_from_stack)
(op 'load_from_stack_0)
(op 'load_from_stack_1)
(op 'store_to_stack)
(op 'store_to_stack_0)
(op 'store_to_stack_1)
(op 'call_function)
(op 'call_symbol_function)
(op 'return_function)