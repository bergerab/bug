(function compile (expr)
  ;; TODO: return value should be a function -- need some way of making a function from code and constants make a op_make_function?
  (let ((compiler (make-compiler)))
    (compiler-compile compiler expr)
    ;; Is this OK? always add a return? what about top level expressions?
    (push-byte compiler *op-return-function*)
    (compiler-make-function compiler)))

(struct symbol-table
  ((entries object)))

(struct symbol-table-entry
  ((symbol object)
   (local-index object)))

;; a function that is being compiled
(struct bytecode
  ((name object)
   (code object)
   (constants object)
   (stack-size object)
   (macro? object)
   (nargs object)
   (docstring object)
   (accepts-all object)))

;; the compiler state for compiling to bugbc
(struct compiler
  ((bytecode object)
   (symbol-table object)))

(function make-symbol-table ()
  (let ((st (alloc symbol-table)))
    (set-field st entries nil)
    st))

(function clone-symbol-table (st0)
  (let ((st1 (alloc symbol-table)))
    (set-field st1 entries (get-field st0 entries))
    st1))

(function make-symbol-table-entry (symbol local-index)
  (let ((e (alloc symbol-table-entry)))
    (set-field e symbol symbol)
    (set-field e local-index local-index)
    e))

(function symbol-table-find-symbol (st sym)
  "searches the current frame in the symbol table for the entry with the given symbol"
  (find entry (get-field st entries)
    (= (get-field entry symbol) sym)))

(function compiler-find-symbol (compiler sym)
  "searches the current frame in the symbol table for the entry with the given symbol"
  (symbol-table-find-symbol (get-field compiler symbol-table) sym))

(function symbol-table-add-symbol (st entry)
  (set-field st entries (cons entry (get-field st entries))))

(function compiler-add-symbol (compiler entry)
  (symbol-table-add-symbol (get-field compiler symbol-table) entry))

(function compiler-extend-symbol-table (c0)
  "Clones the compiler, with a "
  (let ((c1 (alloc compiler)))
    (set-field c1 bytecode (get-field c0 bytecode))
    (set-field c1 symbol-table (clone-symbol-table (get-field c0 symbol-table)))
    c1))

(function compiler-extend-for-function (c0)
  "clones the symbol-table, and makes a new bytecode object for the compiler"
  (let ((c1 (alloc compiler)))
    (set-field c1 bytecode (make-bytecode))
    (set-field c1 symbol-table (clone-symbol-table (get-field c0 symbol-table)))
    c1))

(function make-bytecode ()
  (let ((bc (alloc bytecode)))
    (set-field bc name nil)
    (set-field bc code (dynamic-byte-array 10))
    (set-field bc constants (dynamic-array 10))
    (set-field bc stack-size 0)
    (set-field bc nargs 0)
    (set-field bc macro? nil)
    (set-field bc accepts-all nil)
    (set-field bc docstring nil)
    bc))

(function make-compiler ()
  (let ((compiler (alloc compiler)))
    (set-field compiler bytecode (make-bytecode))
    (set-field compiler symbol-table (make-symbol-table))
    compiler))

(function compiler-symbol-table (compiler)
  (get-field compiler symbol-table))

(function push-byte (compiler byte)
  (dynamic-byte-array-push (compiler-code compiler) byte))

(function compiler-constants (c)
  (get-field (get-field c bytecode) constants))

(function compiler-code (c)
  (get-field (get-field c bytecode) code))

(function compiler-code-length (c)
  (dynamic-byte-array-length (compiler-code c)))

(function compiler-code-set (c i x)
  (dynamic-byte-array-set (compiler-code c) i x))

(function compiler-stack-size (c)
  (get-field (get-field c bytecode) stack-size))

(function compiler-bytecode (c)
  (get-field c bytecode))

(function compiler-set-stack-size (c n)
  (set-field (get-field c bytecode) stack-size n))

(function compiler-inc-stack-size (c)
  (inc-field (get-field c bytecode) stack-size))

(function compiler-inc-nargs (c)
  (inc-field (get-field c bytecode) nargs))

(function add-constant (compiler value)
  ;; TODO this should use a ref-equals because lists can be constants. we would want those to always be added as new entries. same with two different strings.
  (let* ((i 0)
        (existing-value 
          (dynamic-array-find constant (compiler-constants compiler) 
            (inc-local i)
            (= constant value)))
        (existing-value-index (when existing-value (- i 1))))
      (if existing-value
          existing-value-index
        (dynamic-array-push (compiler-constants compiler) value)
        (- (dynamic-array-length (compiler-constants compiler)) 1))))

(function compile-best-const-op (compiler i)
  (cond 
    ((= i 0) (push-byte compiler *op-const-0*))
    ((= i 1) (push-byte compiler *op-const-1*))
    ((= i 2) (push-byte compiler *op-const-2*))
    ((= i 3) (push-byte compiler *op-const-3*))
    (t 
      (push-byte compiler *op-const*)
      (compiler-push-integer compiler i))))

(function compiler-push-integer (compiler i)
  (impl:marshal-integer i (compiler-code compiler) nil))

(function compile-constant (compiler value)
  (let ((i (add-constant compiler value)))
    (compile-best-const-op compiler i)))

(function compiler-compile (compiler expr)
  (typecase expr
    (fixnum (compile-constant compiler expr))
    (ufixnum (compile-constant compiler expr))
    (flonum (compile-constant compiler expr))
    (function (compile-constant compiler expr))
    (string (compile-constant compiler expr))
    (symbol (compile-symbol compiler expr))
    (cons
      (compiler-compile-sexpr compiler expr))
    (otherwise
      (print "I don't know what to do")))
  compiler)

(function compile-symbol (compiler expr)
  (if expr
     (progn
        (let ((entry (compiler-find-symbol compiler expr)))
          (if entry 
            (progn 
                ;; This is a local variable. TODO: make sure you can access function parameters this way too.
                (push-byte compiler *op-load-from-stack*)
                (compiler-push-integer compiler (get-field entry local-index)))
           (compile-constant compiler expr)
           (push-byte compiler *op-symbol-value*))))
    (push-byte compiler *op-load-nil*)))

(function compiler-compile-sexpr (compiler sexpr)
  (let ((symbol (car sexpr))
        (args (cdr sexpr)))
    (cond
      ((= symbol '+) (compiler-compile-arithmetic compiler '+ *op-add* args))
      ((= symbol '-) (compiler-compile-arithmetic compiler '- *op-sub* args))
      ((= symbol '*) (compiler-compile-arithmetic compiler '* *op-mul* args))
      ((= symbol '/) (compiler-compile-arithmetic compiler '/ *op-div* args))

      ((= symbol '&) (compiler-compile-arithmetic compiler '/ *op-bin-and* args))
      ((= symbol '|) (compiler-compile-arithmetic compiler '/ *op-bin-or* args))
      ((= symbol '<<) (compiler-compile-arithmetic compiler '<< *op-shift-left* args))
      ((= symbol '>>) (compiler-compile-arithmetic compiler '>> *op-shift-right* args))

      ((= symbol 'cons) (compiler-compile-two-arg-op compiler 'cons *op-cons* args))
      ((= symbol 'car) (compiler-compile-one-arg-op compiler 'car *op-car* args))
      ((= symbol 'cdr) (compiler-compile-one-arg-op compiler 'cdr *op-cdr* args))

      ((= symbol 'and) (compiler-compile-two-arg-op compiler 'and *op-and* args))
      ((= symbol 'or) (compiler-compile-two-arg-op compiler 'or *op-or* args))
      ((= symbol '>) (compiler-compile-two-arg-op compiler '> *op-gt* args))
      ((= symbol '<) (compiler-compile-two-arg-op compiler '< *op-lt* args))
      ((= symbol '>=) (compiler-compile-two-arg-op compiler '>= *op-gte* args))
      ((= symbol '<=) (compiler-compile-two-arg-op compiler '<= *op-lte* args))
      ((= symbol '=) (compiler-compile-two-arg-op compiler '= *op-eq* args))

      ((= symbol 'call) 
        (require-at-least compiler 'call 1 args)
        (let ((count (compile-and-count-args compiler (cdr args))))
          (compiler-compile compiler (car args))
          (push-byte compiler *op-call-function*)
          (compiler-push-integer compiler count)))

      ((= symbol 'progn) 
        (require-at-least compiler 'progn 1 args) 
        (compile-args-as-progn compiler args))

      ((= symbol 'set) (compiler-compile-two-arg-op compiler 'set *op-set-symbol-value* args))
      ((= symbol 'set-symbol-function) (compiler-compile-two-arg-op compiler 'set-symbol-function *op-set-symbol-function* args))

      ((= symbol 'print) 
        (require-at-least compiler 'print 1 args) 
        (compile-args-with-op compiler args *op-print*)
        (push-byte compiler *op-load-nil*))

      ((= symbol 'list) 
        (require-at-least compiler 'list 1 args) 
        (let ((count (compile-and-count-args compiler args)))
          (push-byte compiler *op-list*)
          (compiler-push-integer compiler count)))

      ((= symbol 'quote) 
        (require-nargs compiler 'quote 1 args) 
        (compile-constant compiler (car args)))

      ((= symbol 'while) 
        (require-at-least compiler 'while 2 args)
        (let ((jump-0-index 0)
              (jump-1-index 0)
              (jump-offset 0))

          ;; store the top of the while (to check the condition again)
          (set-local jump-0-index (- (compiler-code-length compiler) 1))

          ;; compile the condition part of the while
          (compiler-compile compiler (car args))
          (push-byte compiler *op-jump-forward-when-nil*)
          ;; dummy arg of zeros for jump -- will be updated below to go to end of while statement (once we know how large the while body is)
          (push-byte compiler 0)
          (push-byte compiler 0)
          (set-local jump-1-index (- (compiler-code-length compiler) 1))

          ;; compile the body part of the while
          (compile-args-with-op compiler (cdr args) *op-drop*)
          ;; jump back to the condition
          (push-byte compiler *op-jump-backward*)
          (set-local jump-offset (- (compiler-code-length compiler) jump-0-index))
          (when (> jump-offset 65535)
            (print "ERROR 'body' part of 'while' special form exceeded maximum jump."))
          (push-byte compiler (>> (& jump-offset 65280) 8))
          (push-byte compiler (& jump-offset 255))

          ;; now we know how far the jump to the end should have been - update it
          (set-local jump-offset (- (compiler-code-length compiler) jump-1-index))
          (when (> jump-offset 65535)
            (print "ERROR 'body' part of 'while' special form exceeded maximum jump."))

          ;; 65280 = 0xFF00
          (compiler-code-set compiler (- jump-1-index 1) (>> (& jump-offset 65280) 8))
          (compiler-code-set compiler jump-1-index (& jump-offset 255))
          (push-byte compiler *op-load-nil*)))

      ((= symbol 'if) 
        (require-at-least compiler 'if 3 args)
        (let ((jump-0-index 0)
              (jump-1-index 0)
              (jump-offset 0))

          ;; compile the condition part of the if
          (compiler-compile compiler (car args))
          (push-byte compiler *op-jump-forward-when-nil*)
          ;; dummy arg of zeros for jump -- will be updated below to go to end of if statement:
          (push-byte compiler 0)
          (push-byte compiler 0)
          (set-local jump-0-index (- (compiler-code-length compiler) 1))

          ;; compile the then part of the if
          (compiler-compile compiler (cadr args))
          (push-byte compiler *op-jump-forward*)
          ;; dummy arg of zeros for jump -- will be updated below to go to end of if statement:
          (push-byte compiler 0)
          (push-byte compiler 0)
          (set-local jump-1-index (- (compiler-code-length compiler) 1))

          ;; now we know how far the first jump should have been - update it
          (set-local jump-offset (- (compiler-code-length compiler) jump-0-index))
          (when (> jump-offset 65535)
            ;; TODO: should we use op-jump-forward/op-jump-backwards and use unsigned numbers for jumps? or just have op-jump and use signed? or both? this limit depends on that decision.
            (print "ERROR 'then' part of 'if' special form exceeded maximum jump."))

          ;; 65280 = 0xFF00
          (compiler-code-set compiler (- jump-0-index 1) (>> (& jump-offset 65280) 8))
          (compiler-code-set compiler jump-0-index (& jump-offset 255))

          ;; compile else part
          (compile-args-as-progn compiler (cddr args))

          ;; now we know how far the jump to the end should have been - update it
          (set-local jump-offset (- (compiler-code-length compiler) jump-1-index))
          (when (> jump-offset 65535)
            (print "ERROR 'else' part of 'if' special form exceeded maximum jump."))

          ;; 65280 = 0xFF00
          (compiler-code-set compiler (- jump-1-index 1) (>> (& jump-offset 65280) 8))
          (compiler-code-set compiler jump-1-index (& jump-offset 255))))

      ((= symbol 'set-local) 
        (require-nargs compiler 'quote 2 args) 

        (let ((entry (compiler-find-symbol compiler (car args))))
          (if entry
            (progn
              (compiler-compile compiler (cadr args))
              (push-byte compiler *op-store-to-stack*)
              (compiler-push-integer compiler (get-field entry local-index))
              (push-byte compiler *op-load-nil*))
           (print "ERROR local variable not found.")
           (push-byte compiler *op-load-nil*))))

      ((or (= symbol 'impl:define-function) (= symbol 'macro))
        (require-at-least compiler symbol 2 args)
        (let* ((params nil)
               (name (car args))
               (body nil)
               (sub-compiler (compiler-extend-for-function compiler))
               (bc (get-field sub-compiler bytecode))) 
          (cond 
            ((list? name) 
              (set-local params name)
              (set-local name nil))
            ((not (symbol? name))
              (print "ERROR functions must have symbol names"))
            (t 
              (set-local params (cadr args))))
              

          ;; params can be a symbol, in that case all the given arguments are accepted and bound to the symbol ('accepts-all')
          (if (and params (symbol? params))
            (progn
              (compiler-allocate-farg sub-compiler params)
              (set-field bc accepts-all t))
           (for-each param params
              (compiler-allocate-farg sub-compiler param)))

          (set-field bc name name)

          ;; compile each expression in the function and add it to the function's bytecode
          (if (= name nil)
            (set-local body (cdr args))
           (set-local body (cddr args)))

          (compile-args-as-progn sub-compiler body)
          ;; add an implicit return to every function
          (push-byte sub-compiler *op-return-function*)

          (if (= symbol 'macro)
            (progn
              (set-field bc macro? t)
              (unless name
                (print "ERROR macros must have a name."))
              ;; leave no return value of the macro during runtime (not sure if this is what others do):
              (push-byte compiler *op-load-nil*)
              ;; this is key:
              (set-symbol-function name (compiler-make-function sub-compiler)))
             (if (not name)
               (compile-constant compiler (compiler-make-function sub-compiler))
              ;; this is required because macros need to be able to call functions:
              (set-symbol-function name (compiler-make-function sub-compiler))
              (compile-constant compiler name)
              (compile-constant compiler (symbol-function name))
              (push-byte compiler *op-set-symbol-function*)))))

      ((= symbol 'let)
            ;; take a snapshot of the symbol-table (let uses the sym-table before the let)
            (let ((sub-compiler (compiler-extend-symbol-table compiler))) 
              ;; compile using the symbol table from before the let (each let param does not add to the available locals of the next)
              (for-each param (car args)
                  (let* ((key (car param))
                         (value (cadr param))
                         (stack-index (compiler-allocate-local sub-compiler key))) 
                    (compiler-compile compiler value)
                    (push-byte compiler *op-store-to-stack*)
                    (compiler-push-integer compiler stack-index)))
              (compile-args-as-progn sub-compiler (cdr args))))


      ((= symbol 'symbol-value) (compiler-compile-one-arg-op compiler 'car *op-symbol-value* args))
      ((= symbol 'symbol-function) (compiler-compile-one-arg-op compiler 'car *op-symbol-function* args))

      (t
        (if (or (symbol? symbol) (is function symbol))
            (if (and (fbound? symbol) 
                     (and (is function (symbol-function symbol))
                          (function-macro? (symbol-function symbol))))
                          ;; ^^ Yes needed to check if its a function here to make sure its not a FFI function
              (progn
                (let ((code (apply symbol args)))
                  ;; call macro
                  (compiler-compile compiler code)))
             (let ((count (compile-and-count-args compiler args))) 
               ;; call regular function
               (compile-constant compiler symbol)
               (push-byte compiler *op-call-symbol-function*)
               (compiler-push-integer compiler count)))
          (print "ERROR sexpr starts with a non-symbol, non-function value: " sexpr))))))

(function compiler-allocate-farg (compiler sym)
  (do-compiler-allocate-local compiler sym t))

(function compiler-allocate-local (compiler sym)
  (do-compiler-allocate-local compiler sym nil))

(function do-compiler-allocate-local (compiler sym farg?)
  (let ((i (compiler-stack-size compiler)))
    (compiler-add-symbol compiler (make-symbol-table-entry sym i))
    (compiler-inc-stack-size compiler)
    (when farg?
      (compiler-inc-nargs compiler))
    i))

(function compile-args-as-progn (compiler args)
  (when args
    (compiler-compile compiler (car args))
    (when (cdr args)
      (push-byte compiler *op-drop*))
    (compile-args-as-progn compiler (cdr args))))

(function compile-and-count-args (compiler args)
  (if args
    (progn 
      (compiler-compile compiler (car args))
      (+ 1 (compile-and-count-args compiler (cdr args))))
   0))

(function compile-args-with-op (compiler args op)
  (when args
    (compiler-compile compiler (car args))
    (push-byte compiler op)
    (compile-args-with-op compiler (cdr args) op)))

(function require-nargs (compiler symbol n args)
  (unless (= (count args) n)
    (print "ERROR " symbol " takes " n " arguments but was given " (count args))
    ;; Push a dummy value:
    (push-byte compiler *op-load-nil*)))

(function require-at-least (compiler symbol n args)
  (when (< (count args) n)  
    (print "ERROR " symbol " takes at least " n " arguments but was given " (count args) ".")
    ;; Push a dummy value:
    (push-byte compiler *op-load-nil*)))

(function compiler-compile-one-arg-op (compiler symbol op args)
  (require-nargs compiler symbol 1 args)
  (compiler-compile compiler (car args))
  (push-byte compiler op))

(function compiler-compile-two-arg-op (compiler symbol op args)
  (require-nargs compiler symbol 2 args)
  (compiler-compile compiler (car args))
  (compiler-compile compiler (cadr args))
  (push-byte compiler op))

(function compiler-compile-arithmetic (compiler symbol op args)
  (require-at-least compiler symbol 1 args)
  (if (cdr args)
    (progn
        (compiler-compile compiler (car args))
        (compiler-compile compiler (cadr args))
        (push-byte compiler op)
        (for-each value (cddr args)
          (compiler-compile compiler value)
          (push-byte compiler op)))
   (compiler-compile compiler (car args))))

(function compiler-compile-arithmetic-do (compiler symbol op args)
  (when args
    (if (cdr args)
      (progn
        (compiler-compile compiler (car args))
        (compiler-compile compiler (cadr args))
        (push-byte compiler op)
        (compiler-compile-arithmetic-do compiler symbol op (cddr args)))
     (compiler-compile compiler (car args))
     (push-byte compiler op))))

(function compiler-make-function (compiler)
  "Makes a function from the code the compiler has generated.
   (impl:make-function name docstring stack-size nargs accepts-all is-macro code constants)"
  (impl:make-function 
      (get-field (compiler-bytecode compiler) name) 
      (get-field (compiler-bytecode compiler) docstring)
      (compiler-stack-size compiler) 
      (get-field (compiler-bytecode compiler) nargs) 
      (get-field (compiler-bytecode compiler) accepts-all) 
      (get-field (compiler-bytecode compiler) macro?)
      (compiler-code compiler) 
      (compiler-constants compiler)))

(function compile-string (s)
  (let ((x (compile (read (byte-stream s)))))
    (call x)))

(function compile-entire-file (stream)
  (let ((compiler (make-compiler))) 
    (compiler-compile compiler (read-entire-file stream))
    (push-byte compiler *op-return-function*)
    (compiler-make-function compiler)))

 (function compile-compiler ()
    (let* ((input (open-file "../lib/compiler/bootstrap.bug" "rb"))
           (code (compile (read-entire-file input))))
      (close-file input)
      code))

 (function load-bootstrap ()
    (let* ((input (open-file "../lib/compiler/bootstrap.bug" "rb"))
           (code (compile (read-entire-file input))))
      (close-file input)
      (call code)))

(function bootstrap-compiler (verbose)
  "
  Compile the compiler using the bootstrapping compiler (called A).
  (Now we know the new compiler is valid as far as syntax goes, but could contain bugs)
  Evaluate the result. Now you have become the new compiler
  (An error may have happened during evaluation -- this is good it catches bugs before it kills the bootstrap process)
  As the new compiler, compile yourself (called B).
  (An error may happen if there is a bug in the compiler -- again this is good)
  Evaluate the compiler (yourself) you just compiled.
  (An error may happen during evaluation -- this catches bugs in the generated code)
  As the compiled compiler, compile yourself one more time (called C).
  (Again this catches bugs in the generated code)
  Compare the code of B and C. If they are identical, succeed. Otherwise error.
  (Again this catches bugs in the generated code)
  "
  (when verbose
    (print "Generating Compiler A..."))
  (let ((A (compile-compiler))) 
    (when verbose
      (print "Becoming Compiler A..."))
    (call A)
    (when verbose
      (print "Generating Compiler B..."))
    (let ((B (compile-compiler)))
      (when verbose
        (print "Becoming Compiler B..."))
      (call B)
      (when verbose
        (print "Generating Compiler C..."))
        (let ((C (compile-compiler)))
          (when (= A B)
            C)))))

(function commit-compiler (C)
  "different than the struct compiler - C should be a function (the result of (bootstrap-compiler))"
  (let* ((output-file (open-file "../bootstrap/compiler.bc" "wb")))
    (impl:write-bytecode-file output-file C)
    (close-file output-file)))

(function bootstrap-and-commit (verbose)
  "Runs the bootstraping procedure, and writes the result to 'bootstrap/compiler.bc'"
  (let ((C (bootstrap-compiler verbose)))
    (if C
      (commit-compiler C)
     (print "ERROR bootstrapping procedure failed"))))