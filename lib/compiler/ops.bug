(setq *op-number* 0)
(setq *ops* (dynamic-array 10))

(struct op
  ((name object)
   (code object)
   (nargs object)))

(function init-op (name code nargs)
  (let ((op (alloc op)))
    (set-field op name (to-string name))
    (set-field op code code)
    (set-field op nargs nargs)
    op))

(function format-op (op)
  (string-concat
    "<op name=" (string-quote (get-field op name))
            " code=" (get-field op code)
            ">"))

(function op (name)
  (let ((op (init-op name *op-number* 0)))
    (dynamic-array-push *ops* op)
    (set (intern (string-concat "*op-" name "*") *package*) *op-number*)
    (incq *op-number*)
    op))

(function get-op (code)
  (unless (out-of-bounds *ops* code)
    (lisp:dynamic-array-get *ops* code)))

(op 'drop)
(op 'dup)
(op 'intern)
(op 'cons)
(op 'car)
(op 'cdr)
(op 'add)
(op 'addi)
(op 'sub)
(op 'subi)
(op 'mul)
(op 'div)
(op 'list)
(op 'load-nil)
(op 'const)
(op 'const-0)
(op 'const-1)
(op 'const-2)
(op 'const-3)
(op 'push-arg)
(op 'push-args)
(op 'print)
(op 'print-nl)
(op 'eq)
(op 'and)
(op 'or)
(op 'not)
(op 'gt)
(op 'gte)
(op 'bin-and)
(op 'bin-or)
(op 'shift-left)
(op 'shift-right)
(op 'lt)
(op 'lti)
(op 'lte)
(op 'set-symbol-value)
(op 'set-symbol-function)
(op 'symbol-value)
(op 'symbol-function)
(op 'jump-forward)
(op 'jump-forward-when-nil)
(op 'jump-backward)
(op 'load-from-stack)
(op 'load-from-stack-0)
(op 'load-from-stack-1)
(op 'store-to-stack)
(op 'store-to-stack-0)
(op 'store-to-stack-1)
(op 'call-function)
(op 'call-symbol-function)
(op 'return-function)
(op 'alloc-struct)
(op 'byte-stream)
(op 'byte-stream-peek)
(op 'byte-stream-read)
(op 'dynamic-array)
(op 'dynamic-array-get)
(op 'dynamic-array-set)
(op 'dynamic-array-length)
(op 'dynamic-array-push)
(op 'dynamic-array-pop)
(op 'dynamic-array-concat)
(op 'dynamic-byte-array)
(op 'dynamic-byte-array-concat)
(op 'dynamic-byte-array-get)
(op 'dynamic-byte-array-insert)
(op 'dynamic-byte-array-length)
(op 'dynamic-byte-array-set)
(op 'dynamic-byte-array-push)
(op 'dynamic-byte-array-pop)
(op 'function-code)
(op 'gensym)
(op 'string_concat)
(op 'struct-field)
(op 'to-string)
(op 'set-struct-field)
(op 'symbol-name)
(op 'symbol-type)
(op 'type-of)
(op 'write-file)