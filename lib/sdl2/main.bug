"SDL2_ttf uses a zlib dll, and requires that it is in the same directory as the caller."
(impl:change-directory "lib/")

"================= sdl2 library ====================="
(struct sdl-rect
	((x int)
	 (y int)
	 (w int)
	 (h int)))

(struct sdl-keysym
	((scancode uint32)
	 (sym uint32)
	 (mod uint16)
	 (unused uint32)))

(struct sdl-keyboard-event
	((type uint32)
	 (timestamp uint32)
	 (window-id uint32)
	 (state uint8)
	 (repeat uint8)
	 (timestamp uint32)
	 (keysym sdl-keysym)))
"sdl-keysym has to be directly on the struct -- need to make everything that needs a pointer do (* sdl-keysym)"

(function get-key (event)
	(let ((keysym (get-field event keysym)))
		(get-field keysym scancode)))

(setq sdl2 (dynamic-library "SDL2.dll"))

(set-symbol-function 'init
  (foreign-function
  	sdl2 'SDL_Init
  	'int '(int)))

(set-symbol-function 'create-window
  (foreign-function
  	sdl2 'SDL_CreateWindow
    '(pointer void) '(string int int int int int)))

(set-symbol-function 'create-renderer
  (foreign-function
  	sdl2 'SDL_CreateRenderer
    '(pointer void) '((pointer void) int int)))

(set-symbol-function 'get-error
  (foreign-function
  	sdl2 'SDL_GetError
    'string '()))

(set-symbol-function 'rw-from-file
  (foreign-function
  	sdl2 'SDL_RWFromFile
    '(pointer void) '(string string)))

(set-symbol-function 'load-bmp-rw
  (foreign-function
  	sdl2 'SDL_LoadBMP_RW
    '(pointer void) '((pointer void) int)))

(set-symbol-function 'create-texture-from-surface
  (foreign-function
  	sdl2 'SDL_CreateTextureFromSurface
    '(pointer void) '((pointer void) (pointer void))))

(set-symbol-function 'render-clear
  (foreign-function
  	sdl2 'SDL_RenderClear
    '(pointer void) '((pointer void))))

(set-symbol-function 'render-copy
  (foreign-function
  	sdl2 'SDL_RenderCopy
    '(pointer void) '((pointer void) (pointer void) (pointer sdl-rect) (pointer sdl-rect))))

(set-symbol-function 'render-present
  (foreign-function
  	sdl2 'SDL_RenderPresent
    '(pointer void) '((pointer void))))

(set-symbol-function 'poll-keyboard-event
  (foreign-function
  	sdl2 'SDL_PollEvent
    'int '((pointer sdl-keyboard-event))))

(set-symbol-function 'delay
  (foreign-function
  	sdl2 'SDL_Delay
    'int '(int)))
"========================================================"

"================= sdl2-tff library ====================="
(struct sdl-color
	((r uint8)
	 (g uint8)
	 (b uint8)
	 (a uint8)))

(setq sdl2-ttf (dynamic-library "SDL2_ttf.dll"))

(set-symbol-function 'ttf-init
  (foreign-function
  	sdl2-ttf 'TTF_Init
    'int '()))

(set-symbol-function 'open-font
  (foreign-function
  	sdl2-ttf 'TTF_OpenFont
    '(pointer void) '((pointer void) int)))

" TODO: sdl-color needs to be passed by value this is how it is in the ttf-sdl2 library "
(set-symbol-function 'render-text-solid
  (foreign-function
  	sdl2-ttf 'TTF_RenderText_Solid
    '(pointer void) '((pointer void) (pointer void) (pointer sdl-color))))

"helper functions"

(function load-bmp (path)
	(let ((bmp-file (rw-from-file path "rb")))
		(load-bmp-rw bmp-file 1)))

(function load-bmp-tex (ren path)
	(create-texture-from-surface ren (load-bmp path)))
"========================================================"
(impl:change-directory "..") "back to the root"

(function make-text (x y message)
	(let ((surface (render-text-solid *font* message *font-color*)))
		(let ((texture (create-texture-from-surface *renderer* surface)))
			(list :text x y texture message))))

(function get-text-x (text)
	(cadr text))

(function get-text-y (text)
	(caddr text))

(function get-text-texture (text)
	(cadddr text))

(function get-text-message (text)
	(caddddr text))

(function render-text (x y message)
	(render (make-text x y message)))

(setq *default-rect* (alloc sdl-rect))
(set-field *default-rect* x 0)
(set-field *default-rect* y 0)
(set-field *default-rect* w 0)
(set-field *default-rect* h 0)

(setq _render_rect (alloc sdl-rect))
(function render (object)
	(when (= (car object) :text)
			(set-field _render_rect x (get-text-x object))
			(set-field _render_rect y (get-text-y object))
			(set-field _render_rect w (* *font-size* 5))
			(set-field _render_rect h *font-size*)
			(render-copy *renderer* (get-text-texture object) nil _render_rect)))

(setq *keyboard-event* (alloc sdl-keyboard-event))

(setq sdl-firstevent 0)
(setq sdl-quit 256)
(setq sdl-app-windowevent 512)
(setq sdl-app-syswmevent 513)
(setq sdl-keydown 768)
(setq sdl-keyup 769)
(setq sdl-textediting 770)
(setq sdl-textinput 771)
"TODO: add all events from here: https://github.com/zielmicha/SDL2/blob/master/include/SDL_events.h"

(function check-events ()
	(if (> (poll-keyboard-event *keyboard-event*) 0)
		(let ((type (get-field *keyboard-event* type)))
			(if (= type sdl-keydown)
				(print "keydown" (get-key *keyboard-event*))
				(if (= type sdl-keyup)
					(print "keyup" (get-key *keyboard-event*))
				  (if (= type sdl-quit)
				  	(print "quit")
				  	nil)))
				(check-events))
					nil))

(setq content "dink")

(function main-loop (x)
	(check-events)
	(render-clear *renderer*)
	(render-text 0 0 content)
	(render-present *renderer*)
	(if (get-error)
		(print (get-error))
		nil)
	(delay 100)
	(main-loop (+ x 1)))

(function sdl-test ()
	(init 3)

	(setq *window* (create-window "Hello World!" 100 100 620 387 4))
	(setq *renderer* (create-renderer *window* 0 2))

	(if (nil? (ttf-init))
		(print "SDL_TTF failed to initialize.")
		nil)

	(setq *font-size* 64)
	(setq *font* (open-font "fonts/iosevka.ttf" *font-size*))
	(setq *font-color* (alloc 'sdl-color))
	(set-field *font-color* r 0)
	(set-field *font-color* g 255)
	(set-field *font-color* b 0)
	(set-field *font-color* a 0)

	(if (nil? *font*)
		(print "Failed to load font.")
		nil)

	(if (get-error)
		(print (get-error))
		nil)

	(main-loop 0))