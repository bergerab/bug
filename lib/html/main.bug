(setq *self-closing-tag-names* 
  '(area base br col embed hr img input link meta param source track wbr))
(setq *use-indentation* t)
(setq *indentation-depth* 2)
(setq *indent-string* " ")
(setq *splice-symbol* '@)

(function attrsp (x)
  "Gets the attributes part of the element list.
    example: (div ((class \"test\"))) => ((class \"test\"))"
  (let ((attrs (cadr x)))
    (when (and attrs (list-of-lists? attrs))
      attrs)))

(function get-children (el)
  "Gets all the children of the element list.
    example: (div ((class \"test\")) (span \"hi\") \"content\") =>
             ((span \"hi\") \"content\")"
  (if (attrsp el)
    (cddr el)
    (cdr el)))

(function render-attr (attr)
  "Renders a single attribute.
    example: (id \"test\") => id=\"test\" "
  (string-concat (to-string (car attr)) "=" (string-quote (cadr attr))))

(function render-html (el)
  (do-render-html el 0))

(function do-render-html-recurse (child depth) 
  (do-render-html child depth))

"TODO: split any strings on newlines and add indentation when applicable."
(function do-render-html (el depth)
  "Converts a element list into a string."
  (let ((indent (string-times *indent-string* depth)))
    (if (list? el)
      (let* ((tag-name (car el))
             (attrs (attrsp el))
             (skip-render-tag? (= tag-name *splice-symbol*))
             (next-depth (if skip-render-tag? depth (+ depth *indentation-depth*)))
             (rendered-children (mapcar-with-carry 'do-render-html-recurse (get-children el) next-depth))
             (place-on-new-line (and *use-indentation* rendered-children)))
                (string-concat
                  (if skip-render-tag? "" indent)

                  (if skip-render-tag? 
                    ""
                    (string-concat "<" (to-string tag-name) (if attrs " " "")))

                  (string-join (collect item (attrsp el) (render-attr item)) " ")

                  (if skip-render-tag? "" (if place-on-new-line ">\n" ">"))

                  (if *use-indentation*
                    (if skip-render-tag?
                      (string-join rendered-children "\n")
                      (apply 'string-concat 
                        (collect x rendered-children (string-concat x "\n"))))
                    (apply 'string-concat rendered-children))

                  (if skip-render-tag?
                    ""
                    (if (in (car el) *self-closing-tag-names*) ""
                      (string-concat (if place-on-new-line indent "") "</" (to-string tag-name) ">")))))
      (string-concat indent (to-string el)))))

(function write-html (path html)
  "Converts a element list into a string and writes the result to a file."
  (let ((file (open-file path "w+")))
    (impl:write-file file (render-html html))
    (close-file file)))

(function html5-template (title description head content)
  "Generates an empty HTML5 page as a element list."
  `(@ 
    "<!doctype html>"
    (html ((lang "en"))
      (head
        (meta ((charset "utf-8")))
        (meta ((name "viewport") (content "width=device-width, initial-scale=1")))
        (title ,title)
        (meta ((description ,description)))
        (meta ((property "og:title") (content ,title)))
        (meta ((property "og:description") (content ,description)))

        (link ((rel "icon") (href "/favicon.ico")))
        ,head)
        (body
          ,content))))