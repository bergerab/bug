"SDL2_ttf uses a zlib dll, and requires that it is in the same directory as the caller."
(impl:change-directory "./lib/")

"================= sdl2 library ====================="
(impl:struct 'sdl-rect
	'((x int)
		(y int)
		(w int)
		(h int)))

(impl:struct 'sdl-keysym
	'((scancode uint8)
		(sym int)
		(mod int)
		(unicode uint16)))

(impl:struct 'sdl-keyboard-event
	'((type uint8)
		(state uint8)
		(keysym sdl-keysym)))

(set 'sdl2 (impl:dynamic-library "./SDL2.dll"))

(set-symbol-function 'init
  (impl:foreign-function
  	sdl2 'SDL_Init
  	'int '(int)))

(set-symbol-function 'create-window
  (impl:foreign-function
  	sdl2 'SDL_CreateWindow
    'pointer '(string int int int int int)))

(set-symbol-function 'create-renderer
  (impl:foreign-function
  	sdl2 'SDL_CreateRenderer
    'pointer '(pointer int int)))

(set-symbol-function 'get-error
  (impl:foreign-function
  	sdl2 'SDL_GetError
    'string '()))

(set-symbol-function 'rw-from-file
  (impl:foreign-function
  	sdl2 'SDL_RWFromFile
    'pointer '(string string)))

(set-symbol-function 'load-bmp-rw
  (impl:foreign-function
  	sdl2 'SDL_LoadBMP_RW
    'pointer '(pointer int)))

(set-symbol-function 'create-texture-from-surface
  (impl:foreign-function
  	sdl2 'SDL_CreateTextureFromSurface
    'pointer '(pointer pointer)))

(set-symbol-function 'render-clear
  (impl:foreign-function
  	sdl2 'SDL_RenderClear
    'pointer '(pointer)))

(set-symbol-function 'render-copy
  (impl:foreign-function
  	sdl2 'SDL_RenderCopy
    'pointer '(pointer pointer sdl-rect sdl-rect)))

(set-symbol-function 'render-present
  (impl:foreign-function
  	sdl2 'SDL_RenderPresent
    'pointer '(pointer)))

(set-symbol-function 'delay
  (impl:foreign-function
  	sdl2 'SDL_Delay
    'int '(int)))
"========================================================"

"================= sdl2-tff library ====================="
(impl:struct 'sdl-color
	'((r uint8)
		(g uint8)
		(b uint8)
		(a uint8)))

(set 'sdl2-ttf (impl:dynamic-library "./SDL2_ttf.dll"))

(set-symbol-function 'ttf-init
  (impl:foreign-function
  	sdl2-ttf 'TTF_Init
    'int '()))

(set-symbol-function 'open-font
  (impl:foreign-function
  	sdl2-ttf 'TTF_OpenFont
    'pointer '(pointer int)))

(set-symbol-function 'render-text-solid
  (impl:foreign-function
  	sdl2-ttf 'TTF_RenderText_Solid
    'pointer '(pointer pointer sdl-color)))

"helper functions"

(impl:function load-bmp (path)
	(let ((bmp-file (rw-from-file path "rb")))
		(load-bmp-rw bmp-file 1)))

(impl:function load-bmp-tex (ren path)
	(create-texture-from-surface ren (load-bmp path)))
"========================================================"

(impl:function make-text (x y message)
	(let ((surface (render-text-solid *font* message *font-color*)))
		(let ((texture (create-texture-from-surface *renderer* surface)))
			(list :text x y texture message))))

(impl:function get-text-x (text)
	(cadr text))

(impl:function get-text-y (text)
	(caddr text))

(impl:function get-text-texture (text)
	(cadddr text))

(impl:function get-text-message (text)
	(caddddr text))

(impl:function render-text (x y message)
	(render (make-text x y message)))

(impl:function render (object)
	(if (= (car object) :text)
		(render-copy *renderer* (get-text-texture object) nil 
				(list (get-text-x object) (get-text-y object) 
				 	    (* *font-size* 5) *font-size*))
		nil))

(impl:function render-loop (x)
	(render-clear *renderer*)
	(set '*font-color* (list x 0 255 0))
	(render-text 0 10 "hello")
	(set '*font-color* (list x 0 0 0))
	(render-text 100 200 "hello")
	(render-present *renderer*)
	(delay 100)
	(render-loop (+ x 1)))

(impl:function sdl-test ()
	(init 3)

	(set '*window* (create-window "Hello World!" 100 100 620 387 4))
	(set '*renderer* (create-renderer *window* 0 2))

	(set 'cat (load-bmp-tex *renderer* "experiments/sdl/grumpy-cat.bmp"))

	(if (nil? (ttf-init))
		(print "SDL_TTF failed to initialize.")
		nil)

	(set '*font-size* 64)
	(set '*font* (open-font "iosevka.ttf" *font-size*))
	(set '*font-color* '(255 255 255 0))

	(render-loop 0))

(impl:function struct-test ()
	(set 'rect (impl:alloc-struct (impl:symbol-struct 'sdl-rect)))
	(impl:set-struct-field rect 'x 10)
	(impl:set-struct-field rect 'y 20)
	(impl:set-struct-field rect 'w 200)
	(impl:set-struct-field rect 'h 100)

	(print rect)

	(print (impl:struct-field rect 'x))
	(print (impl:struct-field rect 'y))
	(print (impl:struct-field rect 'w))
	(print (impl:struct-field rect 'h)))

(impl:struct 'sdl-rect
	'((x int)
    (y int)
    (w int)
    (h int)
    (d int)))

"If a symbol is passed, look up the symbol type value."