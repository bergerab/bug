"SDL2_ttf uses a zlib dll, and requires that it is in the same directory as the caller."
(impl:change-directory "lib/")

"================= sdl2 library ====================="
(impl:struct 'sdl-rect
	'((x int)
		(y int)
		(w int)
		(h int)))

(impl:struct 'sdl-keysym
	'((scancode uint8)
		(sym int)
		(mod int)
		(unicode uint16)))

(impl:struct 'sdl-keyboard-event
	'((type uint8)
		(state uint8)
		(keysym sdl-keysym)))

(set 'sdl2 (impl:dynamic-library "SDL2.dll"))

(set-symbol-function 'init
  (impl:foreign-function
  	sdl2 'SDL_Init
  	'int '(int)))

(set-symbol-function 'create-window
  (impl:foreign-function
  	sdl2 'SDL_CreateWindow
    'pointer '(string int int int int int)))

(set-symbol-function 'create-renderer
  (impl:foreign-function
  	sdl2 'SDL_CreateRenderer
    'pointer '(pointer int int)))

(set-symbol-function 'get-error
  (impl:foreign-function
  	sdl2 'SDL_GetError
    'string '()))

(set-symbol-function 'rw-from-file
  (impl:foreign-function
  	sdl2 'SDL_RWFromFile
    'pointer '(string string)))

(set-symbol-function 'load-bmp-rw
  (impl:foreign-function
  	sdl2 'SDL_LoadBMP_RW
    'pointer '(pointer int)))

(set-symbol-function 'create-texture-from-surface
  (impl:foreign-function
  	sdl2 'SDL_CreateTextureFromSurface
    'pointer '(pointer pointer)))

(set-symbol-function 'render-clear
  (impl:foreign-function
  	sdl2 'SDL_RenderClear
    'pointer '(pointer)))

(set-symbol-function 'render-copy
  (impl:foreign-function
  	sdl2 'SDL_RenderCopy
    'pointer '(pointer pointer sdl-rect sdl-rect)))

(set-symbol-function 'render-present
  (impl:foreign-function
  	sdl2 'SDL_RenderPresent
    'pointer '(pointer)))

(set-symbol-function 'delay
  (impl:foreign-function
  	sdl2 'SDL_Delay
    'int '(int)))
"========================================================"

"================= sdl2-tff library ====================="
(impl:struct 'sdl-color
	'((r uint8)
		(g uint8)
		(b uint8)
		(a uint8)))

(set 'sdl2-ttf (impl:dynamic-library "SDL2_ttf.dll"))

(set-symbol-function 'ttf-init
  (impl:foreign-function
  	sdl2-ttf 'TTF_Init
    'int '()))

(set-symbol-function 'open-font
  (impl:foreign-function
  	sdl2-ttf 'TTF_OpenFont
    'pointer '(pointer int)))

(set-symbol-function 'render-text-solid
  (impl:foreign-function
  	sdl2-ttf 'TTF_RenderText_Solid
    'pointer '(pointer pointer sdl-color)))

"helper functions"

(impl:function load-bmp (path)
	(let ((bmp-file (rw-from-file path "rb")))
		(load-bmp-rw bmp-file 1)))

(impl:function load-bmp-tex (ren path)
	(create-texture-from-surface ren (load-bmp path)))
"========================================================"
(impl:change-directory "..") "back to the root"

(impl:function make-text (x y message)
	(let ((surface (render-text-solid *font* message *font-color*)))
		(let ((texture (create-texture-from-surface *renderer* surface)))
			(list :text x y texture message))))

(impl:function get-text-x (text)
	(cadr text))

(impl:function get-text-y (text)
	(caddr text))

(impl:function get-text-texture (text)
	(cadddr text))

(impl:function get-text-message (text)
	(caddddr text))

(impl:function render-text (x y message)
	(render (make-text x y message)))

(set '_render_rect (impl:alloc-struct 'sdl-rect))
(impl:function render (object)
	(if (= (car object) :text)
		(progn 
			(impl:set-struct-field _render_rect 'x (get-text-x object))
			(impl:set-struct-field _render_rect 'y (get-text-y object))
			(impl:set-struct-field _render_rect 'w (* *font-size* 5))
			(impl:set-struct-field _render_rect 'h *font-size*)
			(render-copy *renderer* (get-text-texture object) (impl:alloc-struct 'sdl-rect) _render_rect))
		nil))

(impl:function render-loop (x)
	(render-clear *renderer*)
	(render-text 10 10 "hello")
	(render-text 100 200 "hello")
	(render-present *renderer*)
	(print "loop")
	(delay 1000)
	(render-loop (+ x 1)))

(impl:function sdl-test ()
	(init 3)

	(set '*window* (create-window "Hello World!" 100 100 620 387 4))
	(set '*renderer* (create-renderer *window* 0 2))

	(if (nil? (ttf-init))
		(print "SDL_TTF failed to initialize.")
		nil)

	(set '*font-size* 64)
	(set '*font* (open-font "fonts/iosevka.ttf" *font-size*))
	(print *font*)
	(print (impl:type-of *font*))
	(set '*font-color* (impl:alloc-struct 'sdl-color))
	(impl:set-struct-field *font-color* 'r 255)
	(impl:set-struct-field *font-color* 'g 255)
	(impl:set-struct-field *font-color* 'b 255)
	(impl:set-struct-field *font-color* 'a 10)

	(if (nil? *font*)
		(print "Failed to load font.")
		nil)

	(render-loop 0))