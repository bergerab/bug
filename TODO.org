* TODO
- implement interface for SDL
- implement garbage collector
  - fix all bugs caused by not calling free for 5,000 lines of code :'-)
- write the compiler in bug
- implement TCO
- write function for getting primative struct field without creating a new object each time
  - e.g.:
       (set 'buffer (make-buffer))
       (impl:write-struct-field-to-buffer rect 'x buffer)
  - this could be used as a way of saving space when frequently accessing a struct, or several structs
- add way of indexing struct fields (to save time instead of using field name)
  - e.g.:
      (impl:struct-field-at-index rect 0) gets the "x" component of a rectangle
- add used package symbols into symbols list instead of having used package field

- implement closures to support higher order functions
  - right now functions are higher order, but it contains horrible bugs anytime you attempt to reference a free variable (both downward and upward funargs)
- implement dynamic scoped variables
- implement labels/break for whiles

- theres a horrible bug where lexical scoping can be skipped
EXAMPLE:
(macro incq (sym)
  (print-return
	  `(setq ,sym (+ 1 ,sym))))

(macro print-return (x)
	(let ((sym (gensym)))
		`(let ((,sym ,x))
				(print ,sym)
				,sym)))

In this example, the value from incq's sym is printed within print-return.

- 'dba couldn't realloc' if used (list (cadr args)) within the let. only happens when using 'list' (see for-each macro)

- structs should be more like this:
   (struct a
    ((name a) (type asdf) ())
    ((name wef) (type owaiejf)))

- ffi should specify c type and lisp type
  (foreign-function asdf
    ((name (* char) string) (alloca t)))
  - this is important for when the lisp types don't match with the c types (like if a string uses wchar instead of char)

- first order of biz should be to get the compiler working in bug -- then delete a bunch of C code
  - the "init_gis" routine should init default symbols as usual, but should also require a bytecode file of the core.
    "init_gis" will execute the core bytecode first. (there would be some "bootstrap/main.bug")
    - once this is completed, all reading/compiling/etc... code should be removed from C. The marshalling code can Strawberry
      in C.
  - updating the compiler would go like this:
    - Step 1: Compile lib/compiler/main.bug (the result will be bytecode in memory)
        - If the compiler has a syntax error, or other a static semantic error, the compiler will not compile and will error here.
        - Note: we cannot accept this compiler yet. When asked about self hosted compilers people summarize by saying you compile the new compiler with the old compiler
                but that doesn't test that the new compiler is correct. Even if we had unit tests and static checks, it still wouldn't be acceptable. At a minimum we need
                to verify that the new compiler is able to compile itself without error, and that the result it produces runs properly. A simple way to do this is to
                compile the new compiler with itself, and use that compiler to compile itself again. Then check to see if both results are the same. 

                It may seem like Step 3 is not necessary because we can assume the original compiler produces correct and runnable bytecode.
                That will produce a fine update once. The new compiler will run fine. But it doesn't verify that the code the new compiler produces runs fine.
                What if you compare the results of Step 1 with Step 2. If they are the same, then it should work? Using the old compiler to compile the new compiler,
                then using the new compiler to compile the new compiler. What if there was a change in the new compiler where "if" compiled to different bytecodes in some cases (maybe some optimization)?
                Then comparing the old compiler and new compiler's outputs would not have any value.
    - Step 2: Run the result of step 1 to compile lib/compiler/main.bug again.
        - If the new compiler has a bug where it crashes during compilation (runtime/logic error), the compilation will fail.
    - Step 3: Run the result of step 2 to compile lib/compiler/main.bug again.
        - If the compiler produced 
        - Note: We already know that our existing compiler produces valid bytecode (this is tested to be true in the beginning, and verified thru this step for all later versions). 
                We aren't sure that our new compiler produces runnable bytecode. That's the purpose of this step. We would be dead in the water if we accepted the compiler from Step 2,
                if the compiler compiled successfully, but generated invalid bytecode (our new compiler that we switched to would not be able to produce runnable code).
    - Step 4: compare the result of Step 2 and Step 3. If they are the same, write the bytecode from either step as the "bootstrap/compiler.bug". That will be the new compiler.
              Otherwise, error. 
  - these steps test that the compiler #1 can be compiled (it is written in the language properly), #2 it can compile at least itself, #3 the result of the compilation can be run (the compiler produces proper bytecode).
  - The results of Step 2 and Step 3 should be equal otherwise there was a bug.

- Update types to allow for type specifiers

- make a define system where any object type can be defined and named. this would be useful for many cases, like functions.

- have something like FASL
  - two ways of compiling... 
    - one is to include macros and functions -- if it will be loaded into a lisp environment.
    - second is to remove all macros

- load must read one expression at a time and evaluate them in order. This is the only way something like package definitions work.

- image based refactor
  - the bytecode files should be structured in a way where it is image based.
  - right now compiler.bc is evaluated and then the "repl" function is called
  - this should turn into loading an image, and calling the "repl" function
  - this is different than what i've been doing whikjch is to include the text of files in other files (using INCLUDE).
    that is not a good way of doing it. It is slow, and confusing.
  - bug image files .bugi
    - BUGI contains list of packages (each package contains all symbols, and what is bound to the symbol)
  - there is a difference between FASL and images thoug#+HTML:
    - how do you combine these? what if you want to have a compiler and a HTML renderer and load both libraries?

- there are a few different thing you can compile to in common lisp
  - there's compiled files - (normally called .FASL files). which are files compiled for fast LOADing
  - there's compiled functions 


From LispWorks:

```
The compiler translates Lisp forms and source files into binary code for the host machine. A compiled Lisp function, for instance, is a sequence of machine instructions that directly execute the actions the evaluator would perform in interpreting an application of the original source lambda expression. Where possible the behaviors of compiled and interpreted versions of the same Lisp function are identical. Unfortunately the definition of the Common Lisp language results in certain unavoidable exceptions to this rule. The compiler, for instance, must macroexpand the source before translating it; any side effects of macro-expansion happen only once, at compile time.

By using declarations, you can advise the compiler of the types of variables local to a function or shared across an application. For example, numeric operations on a variable declared as a single-float can be compiled as direct floating-point operations, without the need to check the type at execution time. You can also control the relative emphasis the compiler places on efficiency (speed and space), safety (type checking) and support for debugging. By default the compiler produces code that performs all the necessary type checking and includes code to recover from errors. It is especially important that the type declarations be correct when compiling with a safety level less than 3 (see later in this chapter for more details).

When compiling a Lisp source file, the compiler produces its output in a format that is much faster to load than textual Lisp source -- the "fasl" or "fast-load" form. Fasl files contain arbitrary Common Lisp objects in a pre-digested form. They are loaded without needing to use the expensive read function. A series of "fasl-loader" routines built into LispWorks interpret the contents of fasl files, building the appropriate objects and structures in such a way that objects that were eq before fasl-dumping are created eq when fasl-loaded.

Fasl files are given pathname extensions that reflect the target processor they were compiled for; as the fasl files contain processor specific instruction sequences it is essential that the loader be able to distinguish between files compiled for different targets. These pathname extensions always end in "fasl". See dump-forms-to-file for details of all the possible fasl file extensions.
```

What is implemented right now is the compiled function feature -- compiled functions -- but with a twist. I'm treating the top-level as a function too. This shouldn't be the case.
The top-level is just for LOAD and COMPILE-FILE to handle (all about loading).

There are 3 outputs of a lisp system:
  1. Compiled function compiles to the target language
  2. Compiled source (a file) compiles to a FASL file
  3. The 

I merged loading with compiled functions. Compiling a function shouldn't have anything to do with setting symbol values.


Blunders:
  7.  [ ] There should be a way to import/export an image. 
  8.  [ ] Starting the bootstrapped compiler should start by loading an image, then calling the REPL function.

  1.  [ ] COMPILE shouldn't set symbol values during compilation.
  2.  [ ] COMPILE should completely remove defmacros (don't just push NIL).
  4.  [ ] There should be a COMPILE-FILE function that produces a FASL file.
  5.  [ ] There should be a way to load FASL files.
  9.  [ ] Producing a new compiler means LOADing all the compiler files again.
  10. [ ] Creating the new compiler on disk is exporting the image
  11. [ ] Macros _should_ be kept around, it is useful when debugging an image. Compiled functions do not have any reference to macros within them.
  3.  [x] LOAD should READ each form in the input stream and EVAL each individually one line at a time.
  6.  [x] There should be an EVAL function. (OK - I made it so eval compiles and runs)